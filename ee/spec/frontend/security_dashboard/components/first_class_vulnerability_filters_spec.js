import VueRouter from 'vue-router';
import { createLocalVue, shallowMount } from '@vue/test-utils';
import Filters from 'ee/security_dashboard/components/first_class_vulnerability_filters.vue';
import StandardFilter from 'ee/security_dashboard/components/filters/standard_filter.vue';

const router = new VueRouter();
const localVue = createLocalVue();
localVue.use(VueRouter);

describe('First class vulnerability filters component', () => {
  let wrapper;

  const projects = [
    { id: 'gid://gitlab/Project/11', name: 'GitLab Org' },
    { id: 'gid://gitlab/Project/12', name: 'GitLab Com' },
  ];

  const findFilters = () => wrapper.findAll(StandardFilter);
  const findStateFilter = () => wrapper.find('[data-testid="state"]');
  const findProjectFilter = () => wrapper.find('[data-testid="projectId"]');

  const createComponent = ({ propsData, listeners } = {}) => {
    return shallowMount(Filters, { localVue, router, propsData, listeners });
  };

  afterEach(() => {
    wrapper.destroy();
    wrapper = null;
  });

  describe('on render without project filter', () => {
    beforeEach(() => {
      wrapper = createComponent();
    });

    it('should render the default filters', () => {
      expect(findFilters()).toHaveLength(3);
    });

    it('should emit filterChange when a filter is changed', () => {
      const options = { foo: 'bar' };
      findStateFilter().vm.$emit('filter-changed', options);

      expect(wrapper.emitted('filterChange')[0][0]).toEqual(options);
    });
  });

  describe('when project filter is populated dynamically', () => {
    beforeEach(() => {
      wrapper = createComponent();
    });

    it('should render the project filter with no options', async () => {
      wrapper.setProps({ projects: [] });
      await wrapper.vm.$nextTick();
      expect(findProjectFilter().props('filter').options).toHaveLength(0);
    });

    it('should render the project filter with the expected options', async () => {
      wrapper.setProps({ projects });
      await wrapper.vm.$nextTick();

      expect(findProjectFilter().props('filter').options).toEqual([
        { id: '11', name: projects[0].name },
        { id: '12', name: projects[1].name },
      ]);
    });
  });
});
