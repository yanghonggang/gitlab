- max_first_name_length = max_last_name_length = 127
- max_username_length = 255
#register-pane.tab-pane.login-box{ role: 'tabpanel' }
  .login-body
    = form_for(user, as: :new_user, url: trial_registrations_path, html: { class: 'new_user gl-show-field-errors', 'aria-live' => 'assertive' }) do |f|
      .devise-errors
        = render 'devise/shared/error_messages', resource: user
      - if Feature.enabled?(:invisible_captcha)
        = invisible_captcha
      .name.form-row
        .col.form-group
          = f.label :first_name, _('First name'), for: 'new_user_first_name', class: 'label-bold'
          = f.text_field :first_name, class: 'form-control top js-block-emoji js-validate-length', :data => { :max_length => max_first_name_length, :max_length_message => s_("SignUp|First Name is too long (maximum is %{max_length} characters).") % { max_length: max_first_name_length }, :qa_selector => 'new_user_firstname_field' }, required: true, title: _("This field is required.")
        .col.form-group
          = f.label :last_name, _('Last name'), for: 'new_user_last_name', class: 'label-bold'
          = f.text_field :last_name, class: "form-control top js-block-emoji js-validate-length", :data => { :max_length => max_last_name_length, :max_length_message => s_("SignUp|Last Name is too long (maximum is %{max_length} characters).") % { max_length: max_last_name_length }, :qa_selector => 'new_user_lastname_field' }, required: true, title: _("This field is required.")
      .username.form-group
        = f.label :username, for: 'new_user_username', class: 'label-bold'
        = f.text_field :username, class: 'form-control middle js-block-emoji js-validate-length js-validate-username', :data => { :max_length => max_username_length, :api_path => suggestion_path, :max_length_message => s_("SignUp|Username is too long (maximum is %{max_length} characters).") % { max_last_name_length: max_username_length }, :qa_selector => 'new_user_username_field' }, pattern: Gitlab::PathRegex::NAMESPACE_FORMAT_REGEX_JS, required: true, title: _("Please create a username with only alphanumeric characters.")
        %p.validation-error.gl-field-error-ignore.field-validation.hide= _('Username is already taken.')
        %p.validation-success.gl-field-error-ignore.field-validation.hide= _('Username is available.')
        %p.validation-pending.gl-field-error-ignore.field-validation.hide= _('Checking username availability...')
      .form-group
        = f.label :email, for: 'new_user_email', class: 'label-bold'
        = f.email_field :email, class: 'form-control middle', data: { qa_selector: 'new_user_email_field' }, required: true, title: _("Please provide a valid email address.")
      .form-group.append-bottom-20#password-strength
        = f.label :password, for: 'new_user_password', class: 'label-bold'
        = f.password_field :password, class: 'form-control bottom', data: { qa_selector: 'new_user_password_field' }, required: true, pattern: ".{#{@minimum_password_length},}", title: _("Minimum length is %{minimum_password_length} characters.") % { minimum_password_length: @minimum_password_length }
        %p.gl-field-hint.text-secondary= _('Minimum length is %{minimum_password_length} characters') % { minimum_password_length: @minimum_password_length }
        .form-group
          = check_box_tag :terms_opt_in, '1', false, required: true, data: { qa_selector: 'new_user_accept_terms_checkbox' }
          = label_tag :terms_opt_in, for: 'terms_opt_in', class: 'form-check-label' do
            - terms_link_start = '<a href="%{url}" target="_blank" rel="noopener noreferrer">'.html_safe % { url: terms_path }
            = _("I accept the %{terms_link_start}Terms of Service and Privacy Policy%{terms_link_end}").html_safe % { terms_link_start: terms_link_start, terms_link_end: '</a>'.html_safe }
        .form-group
          = f.check_box :email_opted_in, data: { qa_selector: 'new_user_email_opted_in_checkbox' }
          = f.label :email_opted_in, _("I'd like to receive updates via email about GitLab"), class: 'form-check-label'
      %div
      - if show_recaptcha_sign_up?
        = recaptcha_tags
      .submit-container
        = f.submit _("Continue"), class: "btn-register btn", data: { qa_selector: 'new_user_register_button' }
