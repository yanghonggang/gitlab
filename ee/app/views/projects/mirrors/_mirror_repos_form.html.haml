- import_data = @project.import_data || @project.build_import_data
- protocols = Gitlab::UrlSanitizer::ALLOWED_SCHEMES.join('|')
- direction_options = [[_('Push'), 'push']]
- has_existing_pull_mirror = @project.mirror.present?

- if can?(current_user, :admin_mirror, @project)
  - pull_addition_method = has_existing_pull_mirror ? direction_options.method(:push) : direction_options.method(:unshift)
  - pull_addition_method.call([_('Pull'), 'pull'])

.form-group
  = label_tag :mirror_direction, _('Mirror direction'), class: 'label-light'
  .select-wrapper
    = select_tag :mirror_direction, options_for_select(direction_options), class: 'form-control select-control js-mirror-direction qa-mirror-direction', disabled: (direction_options.count == 1) || has_existing_pull_mirror
    = sprite_icon('chevron-down', css_class: "gl-icon gl-absolute gl-top-3 gl-right-3 gl-text-gray-200")

.js-form-insertion-point

%template.js-push-mirrors-form
  = render partial: "projects/mirrors/mirror_repos_push", locals: { f: f }

%template.js-pull-mirrors-form
  = f.hidden_field :mirror, value: '1'
  = f.hidden_field :username_only_import_url, class: 'js-mirror-url-hidden', required: true, pattern: "(#{protocols}):\/\/.+"
  = f.hidden_field :only_mirror_protected_branches, class: 'js-mirror-protected-hidden'

  = f.fields_for :import_data, import_data, include_id: false do |import_form|
    = render partial: 'projects/mirrors/ssh_host_keys', locals: { f: import_form }
    = render partial: 'projects/mirrors/authentication_method', locals: { f: import_form }

  .form-group
    = f.label :mirror_user_id_select, _('Mirror user'), class: 'label-light'
    = select_tag(:mirror_user_id_select, options_for_mirror_user, class: 'js-mirror-user select2 lg gl-mb-2', required: true, disabled: true)
    .help-block
      = _('You will be the author of all events in the activity feed that are the result of an update, like new branches being created or new commits being pushed to existing branches.')

  - if Feature.enabled?(:pull_mirror_branch_prefix, @project)
    .form-group
      = f.label :pull_mirror_branch_prefix, _('Branch prefix'), class: 'label-light'
      = f.text_field :pull_mirror_branch_prefix, class: 'form-control', placeholder: 'Example: upstream/'
      .help-block
        = _("Mirrored branches will have this prefix. If you enabled 'Only mirror protected branches' you need to include this prefix on protected branches in this project or nothing will be mirrored.")

  .form-check.gl-mb-3
    = f.check_box :mirror_overwrites_diverged_branches, class: 'form-check-input', checked: false
    = f.label :mirror_overwrites_diverged_branches, _('Overwrite diverged branches'), class: 'form-check-label'
    .form-text.text-muted
      = _("If disabled, a diverged local branch will not be automatically updated with commits from its remote counterpart, to prevent local data loss. If the default branch (%{default_branch}) has diverged and cannot be updated, mirroring will fail. Other diverged branches are silently ignored.") % { default_branch: @project.default_branch }

  - if @project.builds_enabled?
    = render 'shared/mirror_trigger_builds_setting', f: f, checked: false
