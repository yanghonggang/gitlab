.gl-responsive-table-row{ role: 'row', data: { qa_selector: 'user_row_content' } }
  .table-section.section-40
    .table-mobile-header{ role: 'rowheader' }
      = _('Name')
    .table-mobile-content
      = render 'user_detail', user: user
  .table-section.section-10
    .table-mobile-header{ role: 'rowheader' }
      = _('Projects')
    .table-mobile-content.gl-str-truncated{ data: { testid: "user-project-count-#{user.id}" } }
      = user.authorized_projects.length
  .table-section.section-15
    .table-mobile-header{ role: 'rowheader' }
      = _('Created on')
    .table-mobile-content
      = l(user.created_at.to_date, format: :admin)
  .table-section.section-15
    .table-mobile-header{ role: 'rowheader' }
      = _('Last activity')
    .table-mobile-content
      = user.last_activity_on.nil? ? _('Never') : l(user.last_activity_on, format: :admin)
  - unless user.internal?
    .table-section.section-20.table-button-footer
      .table-action-buttons
        = link_to _('Edit'), edit_admin_user_path(user), id: "edit_#{dom_id(user)}", class: 'btn gl-button btn-default'
        - unless user == current_user
          %button.dropdown-new.btn.gl-button.btn-default{ type: 'button', data: { testid: "user-action-button-#{user.id}", toggle: 'dropdown' } }
            = sprite_icon('settings')
            = sprite_icon('chevron-down')
          %ul.dropdown-menu.dropdown-menu-right{ data: { testid: "user-action-dropdown-#{user.id}" } }
            %li.dropdown-header
              = _('Settings')
              %li
                - if user.ldap_blocked?
                  %span.small
                    = s_('AdminUsers|Cannot unblock LDAP blocked users')
                - elsif user.blocked?
                  - if user.blocked_pending_approval?
                    = link_to s_('AdminUsers|Approve'), approve_admin_user_path(user), method: :put
                    %button.btn.btn-default-tertiary.js-confirm-modal-button{ data: user_block_data(user, user_block_effects) }
                      = s_('AdminUsers|Block')
                  - else
                    = link_to _('Unblock'), unblock_admin_user_path(user), method: :put
                - else
                  %button.btn.btn-default-tertiary.js-confirm-modal-button{ data: user_block_data(user, user_block_effects) }
                    = s_('AdminUsers|Block')
              - if user.can_be_deactivated?
                %li
                  %button.btn.btn-default-tertiary{ data: { 'gl-modal-action': 'deactivate',
                    url: deactivate_admin_user_path(user),
                    username: sanitize_name(user.name) } }
                    = s_('AdminUsers|Deactivate')
              - elsif user.deactivated?
                %li
                  = link_to _('Activate'), activate_admin_user_path(user), method: :put
              - if user.access_locked?
                %li
                  = link_to _('Unlock'), unlock_admin_user_path(user), method: :put, data: { confirm: _('Are you sure?') }
            - if can?(current_user, :destroy_user, user)
              %li.divider
              - if user.can_be_removed?
                %li
                  %button.delete-user-button.btn.btn-default-tertiary.text-danger{ data: { 'gl-modal-action': 'delete',
                    delete_user_url: admin_user_path(user),
                    block_user_url: block_admin_user_path(user),
                    username: sanitize_name(user.name) } }
                    = s_('AdminUsers|Delete user')
                %li
                  %button.delete-user-button.btn.btn-default-tertiary.text-danger{ data: { 'gl-modal-action': 'delete-with-contributions',
                    delete_user_url: admin_user_path(user, hard_delete: true),
                    block_user_url: block_admin_user_path(user),
                    username: sanitize_name(user.name) } }
                    = s_('AdminUsers|Delete user and contributions')
