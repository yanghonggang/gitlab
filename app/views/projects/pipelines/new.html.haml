- breadcrumb_title _('Pipelines')
- page_title s_('Pipeline|Run Pipeline')
- settings_link = link_to _('CI/CD settings'), project_settings_ci_cd_path(@project)

%h3.page-title
  = s_('Pipeline|Run Pipeline')
%hr

- if Feature.enabled?(:new_pipeline_form, @project)
  #js-new-pipeline{ data: { project_id: @project.id,
    pipelines_path: project_pipelines_path(@project),
    config_variables_path: config_variables_namespace_project_pipelines_path(@project.namespace, @project),
    ref_param: params[:ref] || @project.default_branch,
    var_param: params[:var].to_json,
    file_param: params[:file_var].to_json,
    ref_names: @project.repository.ref_names.to_json.html_safe,
    settings_link: project_settings_ci_cd_path(@project),
    max_warnings: ::Gitlab::Ci::Warnings::MAX_LIMIT } }

- else
  = form_for @pipeline, as: :pipeline, url: project_pipelines_path(@project), html: { id: "new-pipeline-form", class: "js-new-pipeline-form js-requires-input" } do |f|
    = form_errors(@pipeline)
    = pipeline_warnings(@pipeline)
    .form-group.row
      .col-sm-12
        = f.label :ref, s_('Pipeline|Run for'), class: 'col-form-label'
        = hidden_field_tag 'pipeline[ref]', params[:ref] || @project.default_branch
        = dropdown_tag(params[:ref] || @project.default_branch,
                      options: { toggle_class: 'js-branch-select wide monospace',
                                  filter: true, dropdown_class: "dropdown-menu-selectable git-revision-dropdown", placeholder: s_("Pipeline|Search branches"),
                                  data: { selected: params[:ref] || @project.default_branch, field_name: 'pipeline[ref]' } })
        .form-text.text-muted
          = s_("Pipeline|Existing branch name or tag")

      .col-sm-12.gl-mt-3.js-ci-variable-list-section
        %label
          = s_('Pipeline|Variables')
        %ul.ci-variable-list
          - if params[:var]
            - params[:var].each do |variable|
              = render 'ci/variables/url_query_variable_row', form_field: 'pipeline', variable: variable
          - if params[:file_var]
            - params[:file_var].each do |variable|
              - variable.push("file")
              = render 'ci/variables/url_query_variable_row', form_field: 'pipeline', variable: variable
          = render 'ci/variables/variable_row', form_field: 'pipeline', only_key_value: true
        .form-text.text-muted
          = (s_("Pipeline|Specify variable values to be used in this run. The values specified in %{settings_link} will be used by default.") % {settings_link: settings_link}).html_safe

    .form-actions
      = f.submit s_('Pipeline|Run Pipeline'), class: 'btn btn-success js-variables-save-button'
      = link_to _('Cancel'), project_pipelines_path(@project), class: 'btn btn-default float-right'

  %script#availableRefs{ type: "application/json" }= @project.repository.ref_names.to_json.html_safe
