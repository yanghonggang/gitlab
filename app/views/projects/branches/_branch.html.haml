- merged = local_assigns.fetch(:merged, false)
- commit = @repository.commit(branch.dereferenced_target)
- merge_project = merge_request_source_project_for_project(@project)
%li{ class: "branch-item js-branch-item js-branch-#{branch.name}", data: { name: branch.name } }
  .branch-info
    .branch-title
      = sprite_icon('fork', size: 12)
      = link_to project_tree_path(@project, branch.name), class: 'item-title str-truncated-100 ref-name gl-ml-3 qa-branch-name' do
        = branch.name
      - if branch.name == @repository.root_ref
        %span.badge.badge-primary.gl-ml-2 default
      - elsif merged
        %span.badge.badge-info.has-tooltip.gl-ml-2{ title: s_('Branches|Merged into %{default_branch}') % { default_branch: @repository.root_ref } }
          = s_('Branches|merged')

      - if protected_branch?(@project, branch)
        %span.badge.badge-success.gl-ml-2
          = s_('Branches|protected')

      = render_if_exists 'projects/branches/diverged_from_upstream', branch: branch

    .block-truncated
      - if commit
        = render 'projects/branches/commit', commit: commit, project: @project
      - else
        = s_('Branches|Cant find HEAD commit for this branch')

  - if branch.name != @repository.root_ref
    .js-branch-divergence-graph

  .controls.d-none.d-md-block<
    - if commit_status
      = render 'ci/status/icon', size: 24, status: commit_status, option_css_classes: 'gl-display-inline-flex gl-vertical-align-middle gl-mr-5'
    - elsif show_commit_status
      .gl-display-inline-flex.gl-vertical-align-middle.gl-mr-5
        %svg.s24

    - if merge_project && create_mr_button?(@repository.root_ref, branch.name)
      = link_to create_mr_path(@repository.root_ref, branch.name), class: 'gl-button btn btn-default' do
        = _('Merge request')

    - if branch.name != @repository.root_ref
      = link_to project_compare_index_path(@project, from: @repository.root_ref, to: branch.name),
        class: "gl-button btn btn-default js-onboarding-compare-branches #{'gl-ml-3' unless merge_project}",
        method: :post,
        title: s_('Branches|Compare') do
        = s_('Branches|Compare')

    = render 'projects/buttons/download', project: @project, ref: branch.name, pipeline: @refs_pipelines[branch.name]

    - if can?(current_user, :push_code, @project)
      - if branch.name == @project.repository.root_ref
        %button{ class: "gl-button btn btn-danger remove-row has-tooltip disabled",
          disabled: true,
          title: s_('Branches|The default branch cannot be deleted') }
          = sprite_icon("remove")
      - elsif protected_branch?(@project, branch)
        - if can?(current_user, :push_to_delete_protected_branch, @project)
          %button{ class: "gl-button btn btn-danger remove-row has-tooltip",
            title: s_('Branches|Delete protected branch'),
            data: { toggle: "modal",
              target: "#modal-delete-branch",
              delete_path: project_branch_path(@project, branch.name),
              branch_name: branch.name,
              is_merged: ("true" if merged) } }
            = sprite_icon("remove")
        - else
          %button{ class: "gl-button btn btn-danger remove-row has-tooltip disabled",
            disabled: true,
            title: s_('Branches|Only a project maintainer or owner can delete a protected branch') }
            = sprite_icon("remove")
      - else
        = link_to project_branch_path(@project, branch.name),
          class: "gl-button btn btn-danger remove-row qa-remove-btn js-ajax-loading-spinner has-tooltip",
          title: s_('Branches|Delete branch'),
          method: :delete,
          data: { confirm: s_("Branches|Deleting the '%{branch_name}' branch cannot be undone. Are you sure?") % { branch_name: branch.name } },
          remote: true,
          'aria-label' => s_('Branches|Delete branch') do
          = sprite_icon("remove")
